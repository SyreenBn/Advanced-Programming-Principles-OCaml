(*-----------------------------------------------------------------------------------------*)
(*---------------------------- Question 2 ---------------------------------------------*)
(*-----------------------------------------------------------------------------------------*)

(*-----------------------------------------------------------------------------------------*)
(*----------------------------- Fold_Left-----------------------------------------------*)
(*-----------------------------------------------------------------------------------------*)
foldl f v [] = v
foldl f v (x::xs) = foldl f (f v x) xs
and b1 b2 = if b1 then b2 else false
andl l = foldl and true l


(*-----------------------------------------------------------------------------------------*)
(*----------------------------- Call By Value -----------------------------------------*)
(*-----------------------------------------------------------------------------------------*)
andl (t::f::t::t::[]) â- the initial expression
= foldl and true (t::f::t::t::[])
= foldl and (and true t) (f::t::t::[])
= foldl and (if t then t else false) (f::t::t::[])
= foldl and t (f::t::t::[])
= foldl and (and t f) (t::t::[])
= foldl and (if f then f else false) (f::t::t::[])
= foldl and f (t::t::[])
= foldl and (and f t) (t::[])
= foldl and (if f then f else false) (t::[])
= foldl and f (t::[])
= foldl and f t ([])
= foldl and (if f then f else false) ([])
= foldl and f [] 
= f

(*-----------------------------------------------------------------------------------------*)
(*----------------------------- Call By Name-----------------------------------------*)
(*-----------------------------------------------------------------------------------------*)
andl (t::f::t::t::[])â- the initial expression
= foldl and true (t::f::t::t::[])
= foldl and (and true t) (f::t::t::[])
= foldl and ( and (and true t) f) (t::t::[])
= foldl and ( and ( and (and true t) f) t) (t::[])
= foldl and ( and ( and ( and (and true t) f) t) t) ([])
= and ( and ( and (and true t) f) t) t
= and ( and ( and (if true then t else false) f) t) t
= and ( and ( and t f) t) t
= and ( and ( if t then f else false) t) t
= and ( and f t) t
= and ( if f then t else false) t
= and f t
= if f then t else false
= false

(*-----------------------------------------------------------------------------------------*)
(*----------------------------- Fold_Right --------------------------------------------*)
(*-----------------------------------------------------------------------------------------*)
foldr f [] v = v
foldr f (x::xs) v = f x (foldr f xs v)
and b1 b2 = if b1 then b2 else false
andr l = foldr and l true
(*-----------------------------------------------------------------------------------------*)
(*----------------------------- Call By Value ----------------------------------------*)
(*-----------------------------------------------------------------------------------------*)

andr (t::f::t::t::[]) â- the initial expression
= foldr and (t::f::t::t::[]) true
= and t ( foldr and (f::t::t::[]) true)
= and t ( and f ( foldr and (t::t::[]) true))
= and t ( and f ( and t ( foldr and (t::[]) true)))
= and t ( and f ( and t ( and t ( foldr and ([]) true))))
= and t ( and f ( and t ( and t true)))
= and t ( and f ( and t ( if t then true else false))
= and t ( and f ( and t t))
= and t ( and f ( if t then t else false))
= and t ( and f t)
= and t ( if f then f else false)
= and t f
= if t then f else false
= f

(*-----------------------------------------------------------------------------------------*)
(*----------------------------- Call By Name ----------------------------------------*)
(*-----------------------------------------------------------------------------------------*)
andr (t::f::t::t::[]) â- the initial expression
= foldr and (t::f::t::t::[]) true
= and t ( foldr and (f::t::t::[]) true)
= if t then ( foldr and (f::t::t::[]) true) else false
= foldr and (f::t::t::[]) true
= and f (foldr (t::t::[]) true)
= if f then (foldr (t::t::[]) true) else false
= false


(*-----------------------------------------------------------------------------------------*)
(*----------------------------- What is The Best -----------------------------------*)
(*-----------------------------------------------------------------------------------------*)
All four takes 14 steps except the fold right in call by name it is the shortest way to evaluate the statement.
 However, if you use fold right with and the third parameter it has to be true to return the right answer.
 If it is false the function with terminate after the first call. So, if all elements of the list are true,
 it will return true. However if all elements true but the third parameter of fold right are false, it will
 return false. On the other hand, if you want to use or instead of and, you have to pass false in the third
 parameter. Otherwise, all takes the same num of steps.

